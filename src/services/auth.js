import api from '@/services/api';

/**
 * Configuration des constantes d'authentification
 */
const AUTH_CONFIG = {
  TOKEN_KEY: 'auth_token',
  TOKEN_PREFIX: 'Bearer',
  DEMO_TOKEN: '2|QPzKqmaXBMlxX5yFf8JwNNdJEEHSpeum57Tb536R45e4fe14'
};

/**
 * Service pour g√©rer l'authentification des utilisateurs
 * Respecte les principes SOLID et Clean Code
 */
class AuthService {
  /**
   * Inscription d'un nouvel utilisateur
   * @param {Object} userData - Donn√©es de l'utilisateur (name, email, password, etc.)
   * @returns {Promise<Object>} Promesse contenant la r√©ponse d'inscription
   * @throws {Error} En cas d'erreur d'inscription
   */
  async register(userData) {
    try {
      const response = await api.post('/register', userData);
      return this._handleAuthResponse(response);
    } catch (error) {
      throw this._handleAuthError(error, 'Erreur lors de l\'inscription');
    }
  }

  /**
   * Connexion d'un utilisateur
   * @param {Object} credentials - Identifiants (email, password)
   * @returns {Promise<Object>} Promesse contenant les donn√©es de connexion et le token
   * @throws {Error} En cas d'erreur de connexion
   */
  async login(credentials) {
    try {
      this._validateCredentials(credentials);
      
      console.log('üîê Tentative de connexion pour:', credentials.email);
      
      const response = await api.post('/login', credentials);
      
      console.log('‚úÖ R√©ponse de connexion re√ßue');
      
      return this._handleAuthResponse(response);
    } catch (error) {
      throw this._handleAuthError(error, 'Erreur de connexion');
    }
  }

  /**
   * Traite la r√©ponse d'authentification et stocke le token
   * @private
   * @param {Object} response - R√©ponse de l'API
   * @returns {Object} Donn√©es de r√©ponse normalis√©es
   */
  _handleAuthResponse(response) {
    const { data } = response;
    
    // Laravel Sanctum retourne 'access_token', pas 'token'
    const accessToken = data.access_token || data.token;
    
    if (!accessToken) {
      throw new Error('Token d\'acc√®s manquant dans la r√©ponse');
    }
    
    const formattedToken = this._formatToken(accessToken);
    this.setToken(formattedToken);
    
    console.log('üíæ Token sauvegard√© avec succ√®s');
    
    return {
      ...data,
      token: formattedToken,
      user: data.user
    };
  }

  /**
   * Formate le token avec le pr√©fixe Bearer si n√©cessaire
   * @private
   * @param {string} token - Token brut
   * @returns {string} Token format√©
   */
  _formatToken(token) {
    if (token.startsWith(AUTH_CONFIG.TOKEN_PREFIX)) {
      return token;
    }
    return `${AUTH_CONFIG.TOKEN_PREFIX} ${token}`;
  }

  /**
   * Valide les credentials avant envoi
   * @private
   * @param {Object} credentials - Identifiants √† valider
   * @throws {Error} Si les credentials sont invalides
   */
  _validateCredentials(credentials) {
    if (!credentials || !credentials.email || !credentials.password) {
      throw new Error('Email et mot de passe requis');
    }
    
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(credentials.email)) {
      throw new Error('Format d\'email invalide');
    }
  }

  /**
   * G√®re les erreurs d'authentification
   * @private
   * @param {Error} error - Erreur originale
   * @param {string} defaultMessage - Message par d√©faut
   * @returns {Error} Erreur format√©e
   */
  _handleAuthError(error, defaultMessage) {
    console.error('‚ùå', defaultMessage, ':', error.response?.data || error.message);
    
    if (error.response?.data?.message) {
      return new Error(error.response.data.message);
    }
    
    if (error.response?.status === 422) {
      const validationErrors = error.response.data.errors;
      if (validationErrors) {
        const firstError = Object.values(validationErrors)[0];
        return new Error(Array.isArray(firstError) ? firstError[0] : firstError);
      }
    }
    
    return new Error(error.message || defaultMessage);
  }

  /**
   * R√©cup√®re les donn√©es de l'utilisateur connect√©
   * @returns {Promise<Object>} Promesse contenant les donn√©es utilisateur
   * @throws {Error} En cas d'erreur de r√©cup√©ration
   */
  async getMe() {
    try {
      const response = await api.get('/me');
      return response.data;
    } catch (error) {
      throw this._handleAuthError(error, 'Erreur lors de la r√©cup√©ration du profil');
    }
  }

  /**
   * D√©connexion de l'utilisateur courant (r√©vocation du token actuel)
   * @returns {Promise<Object>} Promesse de d√©connexion
   * @throws {Error} En cas d'erreur de d√©connexion
   */
  async logout() {
    try {
      const response = await api.post('/logout');
      this.removeToken();
      console.log('üö™ D√©connexion r√©ussie');
      return response.data;
    } catch (error) {
      // M√™me en cas d'erreur, on supprime le token local
      this.removeToken();
      console.warn('‚ö†Ô∏è D√©connexion avec erreur, token supprim√© localement');
      throw this._handleAuthError(error, 'Erreur lors de la d√©connexion');
    }
  }

  /**
   * D√©connexion de tous les appareils (r√©vocation de tous les tokens)
   * @returns {Promise<Object>} Promesse de d√©connexion compl√®te
   * @throws {Error} En cas d'erreur de d√©connexion
   */
  async logoutAll() {
    try {
      const response = await api.post('/logout-all');
      this.removeToken();
      console.log('üö™ D√©connexion de tous les appareils r√©ussie');
      return response.data;
    } catch (error) {
      this.removeToken();
      console.warn('‚ö†Ô∏è D√©connexion globale avec erreur, token supprim√© localement');
      throw this._handleAuthError(error, 'Erreur lors de la d√©connexion globale');
    }
  }

  /**
   * Stocke le token d'authentification de mani√®re s√©curis√©e
   * @param {string} token - Token d'authentification
   * @throws {Error} Si le token est invalide
   */
  setToken(token) {
    if (!token || typeof token !== 'string') {
      throw new Error('Token invalide');
    }
    
    localStorage.setItem(AUTH_CONFIG.TOKEN_KEY, token);
    console.log('üíæ Token sauvegard√© dans localStorage');
  }

  /**
   * Supprime le token d'authentification
   */
  removeToken() {
    localStorage.removeItem(AUTH_CONFIG.TOKEN_KEY);
    console.log('üóëÔ∏è Token supprim√© du localStorage');
  }

  /**
   * R√©cup√®re le token d'authentification stock√©
   * @returns {string|null} Token d'authentification ou null
   */
  getToken() {
    return localStorage.getItem(AUTH_CONFIG.TOKEN_KEY);
  }

  /**
   * V√©rifie si l'utilisateur est connect√©
   * @returns {boolean} True si l'utilisateur est connect√©
   */
  isAuthenticated() {
    const token = this.getToken();
    const isAuth = Boolean(token);
    console.log('üîç Statut d\'authentification:', isAuth);
    return isAuth;
  }

  /**
   * Configure un token de d√©monstration pour les tests
   * @returns {string} Token de d√©monstration configur√©
   */
  setDemoToken() {
    const demoToken = `${AUTH_CONFIG.TOKEN_PREFIX} ${AUTH_CONFIG.DEMO_TOKEN}`;
    this.setToken(demoToken);
    console.log('üé≠ Token de d√©monstration configur√©');
    return demoToken;
  }

  /**
   * V√©rifie la validit√© du token actuel
   * @returns {Promise<boolean>} True si le token est valide
   */
  async validateToken() {
    if (!this.isAuthenticated()) {
      return false;
    }
    
    try {
      await this.getMe();
      return true;
    } catch (error) {
      console.warn('üîë Token invalide, suppression...');
      this.removeToken();
      return false;
    }
  }
}

// Export d'une instance unique (Singleton)
const authService = new AuthService();
export default authService;
